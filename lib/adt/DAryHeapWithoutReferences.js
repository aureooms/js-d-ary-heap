"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = DAryHeapWithoutReferences;
function DAryHeapWithoutReferences(arity, compare) {

	// arity of this heap

	this.arity = arity;

	// the comparison function

	this.compare = compare;

	// array used to store values

	this.array = [];

	// size of the heap

	this.length = 0;
}

DAryHeapWithoutReferences.prototype.swap = function (a, i, j) {

	var tmp;

	tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};

DAryHeapWithoutReferences.prototype.head = function () {

	if (this.length === 0) {
		return undefined;
	}

	return this.array[0];
};

DAryHeapWithoutReferences.prototype.pop = function () {

	var a, i, j, value;

	if (this.length === 0) {
		return undefined;
	}

	a = this.array;
	i = 0;
	j = a.length;

	value = pop(this.arity, this.compare, this.swap, a, i, j);

	a.pop();

	--this.length;

	return value;
};

DAryHeapWithoutReferences.prototype.push = function (value) {

	var a, i, j;

	a = this.array;
	i = 0;
	j = a.length;

	a.push(value);

	push(this.arity, this.compare, this.swap, a, i, j);

	++this.length;
};

DAryHeapWithoutReferences.prototype.merge = function (other) {

	var a, i, j, k;

	a = this.array;
	i = 0;
	j = a.length;

	a = this.array = a.concat(other.array);

	k = a.length;

	merge(this.arity, this.compare, this.swap, a, i, j, k);

	this.length += other.length;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZHQvREFyeUhlYXBXaXRob3V0UmVmZXJlbmNlcy5qcyJdLCJuYW1lcyI6WyJEQXJ5SGVhcFdpdGhvdXRSZWZlcmVuY2VzIiwiYXJpdHkiLCJjb21wYXJlIiwiYXJyYXkiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJzd2FwIiwiYSIsImkiLCJqIiwidG1wIiwiaGVhZCIsInVuZGVmaW5lZCIsInBvcCIsInZhbHVlIiwicHVzaCIsIm1lcmdlIiwib3RoZXIiLCJrIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFFd0JBLHlCO0FBQVQsU0FBU0EseUJBQVQsQ0FBcUNDLEtBQXJDLEVBQTRDQyxPQUE1QyxFQUFzRDs7QUFFcEU7O0FBRUEsTUFBS0QsS0FBTCxHQUFhQSxLQUFiOztBQUdBOztBQUVBLE1BQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFHQTs7QUFFQSxNQUFLQyxLQUFMLEdBQWEsRUFBYjs7QUFHQTs7QUFFQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUVBOztBQUdESiwwQkFBMEJLLFNBQTFCLENBQW9DQyxJQUFwQyxHQUEyQyxVQUFXQyxDQUFYLEVBQWNDLENBQWQsRUFBaUJDLENBQWpCLEVBQXFCOztBQUUvRCxLQUFJQyxHQUFKOztBQUVBQSxPQUFNSCxFQUFFQyxDQUFGLENBQU47QUFDQUQsR0FBRUMsQ0FBRixJQUFPRCxFQUFFRSxDQUFGLENBQVA7QUFDQUYsR0FBRUUsQ0FBRixJQUFPQyxHQUFQO0FBRUEsQ0FSRDs7QUFXQVYsMEJBQTBCSyxTQUExQixDQUFvQ00sSUFBcEMsR0FBMkMsWUFBWTs7QUFFdEQsS0FBSyxLQUFLUCxNQUFMLEtBQWdCLENBQXJCLEVBQXlCO0FBQ3hCLFNBQU9RLFNBQVA7QUFDQTs7QUFFRCxRQUFPLEtBQUtULEtBQUwsQ0FBVyxDQUFYLENBQVA7QUFFQSxDQVJEOztBQVdBSCwwQkFBMEJLLFNBQTFCLENBQW9DUSxHQUFwQyxHQUEwQyxZQUFZOztBQUVyRCxLQUFJTixDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhSyxLQUFiOztBQUVBLEtBQUssS0FBS1YsTUFBTCxLQUFnQixDQUFyQixFQUF5QjtBQUN4QixTQUFPUSxTQUFQO0FBQ0E7O0FBRURMLEtBQUksS0FBS0osS0FBVDtBQUNBSyxLQUFJLENBQUo7QUFDQUMsS0FBSUYsRUFBRUgsTUFBTjs7QUFFQVUsU0FBUUQsSUFBSyxLQUFLWixLQUFWLEVBQWlCLEtBQUtDLE9BQXRCLEVBQStCLEtBQUtJLElBQXBDLEVBQTBDQyxDQUExQyxFQUE2Q0MsQ0FBN0MsRUFBZ0RDLENBQWhELENBQVI7O0FBRUFGLEdBQUVNLEdBQUY7O0FBRUEsR0FBRSxLQUFLVCxNQUFQOztBQUVBLFFBQU9VLEtBQVA7QUFFQSxDQXBCRDs7QUF1QkFkLDBCQUEwQkssU0FBMUIsQ0FBb0NVLElBQXBDLEdBQTJDLFVBQVdELEtBQVgsRUFBbUI7O0FBRTdELEtBQUlQLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxDQUFWOztBQUVBRixLQUFJLEtBQUtKLEtBQVQ7QUFDQUssS0FBSSxDQUFKO0FBQ0FDLEtBQUlGLEVBQUVILE1BQU47O0FBR0FHLEdBQUVRLElBQUYsQ0FBUUQsS0FBUjs7QUFFQUMsTUFBTSxLQUFLZCxLQUFYLEVBQWtCLEtBQUtDLE9BQXZCLEVBQWdDLEtBQUtJLElBQXJDLEVBQTJDQyxDQUEzQyxFQUE4Q0MsQ0FBOUMsRUFBaURDLENBQWpEOztBQUVBLEdBQUUsS0FBS0wsTUFBUDtBQUVBLENBZkQ7O0FBaUJBSiwwQkFBMEJLLFNBQTFCLENBQW9DVyxLQUFwQyxHQUE0QyxVQUFXQyxLQUFYLEVBQW1COztBQUU5RCxLQUFJVixDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhUyxDQUFiOztBQUVBWCxLQUFJLEtBQUtKLEtBQVQ7QUFDQUssS0FBSSxDQUFKO0FBQ0FDLEtBQUlGLEVBQUVILE1BQU47O0FBRUFHLEtBQUksS0FBS0osS0FBTCxHQUFhSSxFQUFFWSxNQUFGLENBQVVGLE1BQU1kLEtBQWhCLENBQWpCOztBQUVBZSxLQUFJWCxFQUFFSCxNQUFOOztBQUVBWSxPQUFPLEtBQUtmLEtBQVosRUFBbUIsS0FBS0MsT0FBeEIsRUFBaUMsS0FBS0ksSUFBdEMsRUFBNENDLENBQTVDLEVBQStDQyxDQUEvQyxFQUFrREMsQ0FBbEQsRUFBcURTLENBQXJEOztBQUVBLE1BQUtkLE1BQUwsSUFBZWEsTUFBTWIsTUFBckI7QUFFQSxDQWhCRCIsImZpbGUiOiJEQXJ5SGVhcFdpdGhvdXRSZWZlcmVuY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERBcnlIZWFwV2l0aG91dFJlZmVyZW5jZXMgKCBhcml0eSwgY29tcGFyZSApIHtcblxuXHQvLyBhcml0eSBvZiB0aGlzIGhlYXBcblxuXHR0aGlzLmFyaXR5ID0gYXJpdHk7XG5cblxuXHQvLyB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuXG5cdHRoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG5cblxuXHQvLyBhcnJheSB1c2VkIHRvIHN0b3JlIHZhbHVlc1xuXG5cdHRoaXMuYXJyYXkgPSBbXTtcblxuXG5cdC8vIHNpemUgb2YgdGhlIGhlYXBcblxuXHR0aGlzLmxlbmd0aCA9IDA7XG5cbn1cblxuXG5EQXJ5SGVhcFdpdGhvdXRSZWZlcmVuY2VzLnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24gKCBhLCBpLCBqICkge1xuXG5cdHZhciB0bXA7XG5cblx0dG1wID0gYVtpXTtcblx0YVtpXSA9IGFbal07XG5cdGFbal0gPSB0bXA7XG5cbn07XG5cblxuREFyeUhlYXBXaXRob3V0UmVmZXJlbmNlcy5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uICgpIHtcblxuXHRpZiAoIHRoaXMubGVuZ3RoID09PSAwICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5hcnJheVswXTtcblxufTtcblxuXG5EQXJ5SGVhcFdpdGhvdXRSZWZlcmVuY2VzLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGEsIGksIGosIHZhbHVlO1xuXG5cdGlmICggdGhpcy5sZW5ndGggPT09IDAgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdGEgPSB0aGlzLmFycmF5O1xuXHRpID0gMDtcblx0aiA9IGEubGVuZ3RoO1xuXG5cdHZhbHVlID0gcG9wKCB0aGlzLmFyaXR5LCB0aGlzLmNvbXBhcmUsIHRoaXMuc3dhcCwgYSwgaSwgaiApO1xuXG5cdGEucG9wKCk7XG5cblx0LS10aGlzLmxlbmd0aDtcblxuXHRyZXR1cm4gdmFsdWU7XG5cbn07XG5cblxuREFyeUhlYXBXaXRob3V0UmVmZXJlbmNlcy5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0dmFyIGEsIGksIGo7XG5cblx0YSA9IHRoaXMuYXJyYXk7XG5cdGkgPSAwO1xuXHRqID0gYS5sZW5ndGg7XG5cblxuXHRhLnB1c2goIHZhbHVlICk7XG5cblx0cHVzaCggdGhpcy5hcml0eSwgdGhpcy5jb21wYXJlLCB0aGlzLnN3YXAsIGEsIGksIGogKTtcblxuXHQrK3RoaXMubGVuZ3RoO1xuXG59O1xuXG5EQXJ5SGVhcFdpdGhvdXRSZWZlcmVuY2VzLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uICggb3RoZXIgKSB7XG5cblx0dmFyIGEsIGksIGosIGs7XG5cblx0YSA9IHRoaXMuYXJyYXk7XG5cdGkgPSAwO1xuXHRqID0gYS5sZW5ndGg7XG5cblx0YSA9IHRoaXMuYXJyYXkgPSBhLmNvbmNhdCggb3RoZXIuYXJyYXkgKTtcblxuXHRrID0gYS5sZW5ndGg7XG5cblx0bWVyZ2UoIHRoaXMuYXJpdHksIHRoaXMuY29tcGFyZSwgdGhpcy5zd2FwLCBhLCBpLCBqLCBrICk7XG5cblx0dGhpcy5sZW5ndGggKz0gb3RoZXIubGVuZ3RoO1xuXG59O1xuIl19